apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlinx-serialization'

android {
    compileSdkVersion 31
    defaultConfig {
        applicationId "com.matteopasotti.whatmovie"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.matteopasotti.whatmovie.app.CustomInstrumentationRunner"
    }

    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }

    buildTypes {

        debug {
            minifyEnabled false
            buildConfigField("String", "API_KEY", getApiKey())
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "API_KEY", getApiKey())
        }
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    androidExtensions {
        experimental = true
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    sourceSets {
        debug {
            assets {
                srcDirs 'src/debug/assets', 'src/androidTest/assets'
            }
        }
        main {
            assets {
                srcDirs 'src/main/assets', 'src/androidTest/assets'
            }
        }
    }
}

def getApiKey() {
    def keysProperties = new Properties()
    keysProperties.load(project.rootProject.file("local.properties").newDataInputStream())
    def ApiKey = keysProperties.getProperty("api_key", "")
    return ApiKey
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'

    // Anko
    implementation "org.jetbrains.anko:anko-commons:$anko_version"

    //Retrofit2
    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit2_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$coroutines_adapter"

    //Okhttp3
    implementation "com.squareup.okhttp3:okhttp:$okhttp3_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3_version"

    //ROOM
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    //GLIDE
    kapt "com.github.bumptech.glide:compiler:$glideVersion"
    implementation "com.github.bumptech.glide:glide:$glideVersion"

    //Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutineVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutineVersion"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_viewmodel_ktx"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$androidx_version"

    // GSON
    implementation "com.google.code.gson:gson:2.8.5"

    // Koin for Android - Scope feature
    // include koin-android-scope & koin-android
    // Koin for Android
    implementation "org.koin:koin-android:$koin_version"
    // or Koin for Lifecycle scoping
    implementation "org.koin:koin-androidx-scope:$koin_version"
    // or Koin for Android Architecture ViewModel
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"

    implementation "androidx.appcompat:appcompat:$support_version"
    implementation "com.google.android.material:material:$support_version"
    implementation 'androidx.palette:palette-ktx:1.0.0'
    implementation "androidx.recyclerview:recyclerview:$support_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"

    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.2.0' // For lifecycleScope

//---------------------------- TESTING ----------------------------//

    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test:core-ktx:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso"

    testImplementation "android.arch.core:core-testing:1.1.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutineVersion"
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$mockwebserver_version"

    androidTestImplementation ("org.koin:koin-test:$koin_version") { exclude group: 'org.mockito' }

    implementation 'com.pierfrancescosoffritti.androidyoutubeplayer:core:10.0.5'
}
